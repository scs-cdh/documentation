"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[940],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=n,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return r?o.createElement(h,i(i({ref:t},p),{},{components:r})):o.createElement(h,i({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4353:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=r(7462),n=(r(7294),r(3905));const a={title:"Board Support Packages",description:"Implementation of BSPs.",sidebar_position:2},i="Board Support Packages (BSP)",l={unversionedId:"low-level-architecture/bsp",id:"low-level-architecture/bsp",title:"Board Support Packages",description:"Implementation of BSPs.",source:"@site/docs/low-level-architecture/bsp.md",sourceDirName:"low-level-architecture",slug:"/low-level-architecture/bsp",permalink:"/docs/low-level-architecture/bsp",draft:!1,editUrl:"https://github.com/scsd-cdh/docs/tree/main/docs/low-level-architecture/bsp.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Board Support Packages",description:"Implementation of BSPs.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/low-level-architecture/intro"},next:{title:"Hardware Abstraction Layer",permalink:"/docs/low-level-architecture/hal"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Creating a Board Support Package",id:"creating-a-board-support-package",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"board-support-packages-bsp"},"Board Support Packages (BSP)"),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"The Board Support Package (BSP) is a crate which should provide the following drivers:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"An HAL implementation for the MCU."),(0,n.kt)("li",{parentName:"ol"},"Middleware implementation."),(0,n.kt)("li",{parentName:"ol"},"Implementation of drivers for various components such as sensors, ICs, analog signals, and more that are found on the board.")),(0,n.kt)("p",null,"This crate will be added as a dependency to an AstroCore project (or any other project which could benefit from this implementation), and should supply an interface for all of the low-level implementations that will make it simple and intuitive to build a functional application."),(0,n.kt)("p",null,"The board support package will use the HAL implementation to implement the drivers for the components. As an example, to write the drivers for a NOR Flash chip which uses SPI as its serial communication protocol. The board support package will use the drivers supplied by the ",(0,n.kt)("inlineCode",{parentName:"p"},"HAL.SPI")," package. However, inside the AstroCore application. There should be a simple interface to the NOR Flash. Such package could look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ada"},"-- Provides the implementation for the SPI protocol.\nwith HAL.SPI;\n\npackage Components.NOR_Flash\n\n    -- Constants for NOR Flash commands\n    Flash_Write_Enable : constant Positive := 0x06;\n    Flash_Write_Disable : constant Positive := 0x04;\n    Flash_Read : constant Positive := 0x03;\n    Flash_Write : constant Positive := 0x02;\n    Flash_Erase_Sector : constant Positive := 0x20;\n    Flash_Erase_Block : constant Positive := 0xD8;\n\n    -- Subprograms for NOR Flash operations\n    procedure Initialize;\n    procedure Read_Data(address: Positive; data: out Unsigned_8_Array);\n    procedure Write_Data(address: Positive; data: Unsigned_8_Array);\n    procedure Erase_Sector(sector_address: Positive);\n    procedure Erase_Block(block_address: Positive);\n\nend Components.NOR_Flash;\n")),(0,n.kt)("p",null,"For the implementation of each of these functions, the functions provided by the HAL.SPI package would be used."),(0,n.kt)("h2",{id:"creating-a-board-support-package"},"Creating a Board Support Package"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"To do")))}u.isMDXComponent=!0}}]);